// <auto-generated />
using System;
using HyBrForex.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HyBrForex.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725083730_leadDocument")]
    partial class leadDocument
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Application")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.ActivityLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActivityTypeId")
                        .HasColumnType("text");

                    b.Property<string>("CallType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ActivityLog", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.DomainStages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DomainId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("StagesId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<bool?>("TemplateStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StagesId");

                    b.ToTable("DomainStages", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.HoliDaysLead", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Adults")
                        .HasColumnType("integer");

                    b.Property<string>("AsignedAgent")
                        .HasColumnType("text");

                    b.Property<string>("BeddingPreference")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<int>("ChildWithBed")
                        .HasColumnType("integer");

                    b.Property<int>("ChildWithoutBed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DepatureCity")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnquiryType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadContactId")
                        .HasColumnType("text");

                    b.Property<string>("LeadSourceId")
                        .HasColumnType("text");

                    b.Property<string>("LeadStatusId")
                        .HasColumnType("text");

                    b.Property<string>("MealPlan")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PrefferedDestination")
                        .HasColumnType("text");

                    b.Property<string>("RoomType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TravelType")
                        .HasColumnType("text");

                    b.Property<string>("TripDuration")
                        .HasColumnType("text");

                    b.Property<string>("VerticalId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HoliDaysLead", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.InBondCall", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("CallDuration")
                        .HasColumnType("double precision");

                    b.Property<string>("CallStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CallType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DTMF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ResourceURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("InBondCall", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.Lead", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadContactId")
                        .HasColumnType("text");

                    b.Property<string>("LeadSourceId")
                        .HasColumnType("text");

                    b.Property<string>("LeadStatusId")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PreferedCountry")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("VericalId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeadContactId");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("LeadStatusId");

                    b.ToTable("Lead", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GenderId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<string>("ParentsName")
                        .HasColumnType("text");

                    b.Property<string>("ParentsPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("StateId")
                        .HasColumnType("text");

                    b.Property<string>("StateOutsideIndia")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("VerticalId")
                        .HasColumnType("text");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StateId");

                    b.ToTable("LeadContact", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileSize")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LeadDocument", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadProperties", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CountryInterestedIn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("DepositPaidUniversity")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DocumentUploadStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FutureIntake")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadId")
                        .HasColumnType("text");

                    b.Property<int?>("OfferLetterStatus")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<int?>("RefundStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UniversityPreferred")
                        .HasColumnType("text");

                    b.Property<bool?>("VisaStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("LeadProperties", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadProperyDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LeadProperyDefinition", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadProperyValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("PropertyDefinitionId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PropertyDefinitionId");

                    b.ToTable("LeadProperyValues", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.Stages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Stages", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.SubDomain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DomainId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SubDomain", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.TaskMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CallType")
                        .HasColumnType("text");

                    b.Property<string>("CountryInterestedIn")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DepositPaidUniversity")
                        .HasColumnType("text");

                    b.Property<string>("DomainStagesId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LeadId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubDescription")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TaskDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskNote")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("text");

                    b.Property<string>("UniversityPreferred")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainStagesId");

                    b.ToTable("TaskMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonMsater", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommonTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommonTypeMsaterId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommonTypeId");

                    b.HasIndex("CommonTypeMsaterId");

                    b.ToTable("CommonMsater", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommonTypeMsater", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CountryMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClassId")
                        .HasColumnType("text");

                    b.Property<byte[]>("CountryFlag")
                        .HasColumnType("bytea");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("FATFSanction")
                        .HasColumnType("integer");

                    b.Property<int?>("IBANLength")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CurrencyMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryMasterId")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("CurrencyFlag")
                        .HasColumnType("bytea");

                    b.Property<string>("FLM8Cd")
                        .HasColumnType("text");

                    b.Property<string>("ISD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryMasterId");

                    b.ToTable("CurrencyMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.EmployeeMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingTo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ResignDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpecifyBranch")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.ToTable("EmployeeMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.StateMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("GSTCode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("StateCode")
                        .HasColumnType("text");

                    b.Property<string>("StateName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateMaster", "Application");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.DomainStages", b =>
                {
                    b.HasOne("HyBrCRM.Domain.Exchange.Entities.DomainStages", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("HyBrCRM.Domain.Exchange.Entities.Stages", "Stages")
                        .WithMany()
                        .HasForeignKey("StagesId");

                    b.Navigation("Parent");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.Lead", b =>
                {
                    b.HasOne("HyBrCRM.Domain.Exchange.Entities.LeadContact", "LeadContact")
                        .WithMany()
                        .HasForeignKey("LeadContactId");

                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonMsater", "LeadSource")
                        .WithMany()
                        .HasForeignKey("LeadSourceId");

                    b.HasOne("HyBrCRM.Domain.Exchange.Entities.DomainStages", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId");

                    b.Navigation("LeadContact");

                    b.Navigation("LeadSource");

                    b.Navigation("LeadStatus");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadContact", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CountryMaster", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonMsater", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("HyBrForex.Domain.Exchange.Entities.StateMaster", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("State");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.LeadProperyValue", b =>
                {
                    b.HasOne("HyBrCRM.Domain.Exchange.Entities.LeadProperyDefinition", "PropertyDefinition")
                        .WithMany()
                        .HasForeignKey("PropertyDefinitionId");

                    b.Navigation("PropertyDefinition");
                });

            modelBuilder.Entity("HyBrCRM.Domain.Exchange.Entities.TaskMaster", b =>
                {
                    b.HasOne("HyBrCRM.Domain.Exchange.Entities.DomainStages", "DomainStages")
                        .WithMany()
                        .HasForeignKey("DomainStagesId");

                    b.Navigation("DomainStages");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonMsater", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", "CommonTypeMsater")
                        .WithMany()
                        .HasForeignKey("CommonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", null)
                        .WithMany("CommonMsater")
                        .HasForeignKey("CommonTypeMsaterId");

                    b.Navigation("CommonTypeMsater");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CurrencyMaster", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CountryMaster", "CountryMaster")
                        .WithMany("CurrencyMasters")
                        .HasForeignKey("CountryMasterId");

                    b.Navigation("CountryMaster");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.EmployeeMaster", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonMsater", "Designation")
                        .WithMany("EmployeeMaster")
                        .HasForeignKey("DesignationId");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.StateMaster", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CountryMaster", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonMsater", b =>
                {
                    b.Navigation("EmployeeMaster");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", b =>
                {
                    b.Navigation("CommonMsater");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CountryMaster", b =>
                {
                    b.Navigation("CurrencyMasters");
                });
#pragma warning restore 612, 618
        }
    }
}

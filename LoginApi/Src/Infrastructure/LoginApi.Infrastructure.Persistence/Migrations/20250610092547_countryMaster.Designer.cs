// <auto-generated />
using System;
using HyBrForex.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HyBrForex.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610092547_countryMaster")]
    partial class countryMaster
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Application")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonMsater", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommonTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommonTypeMsaterId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommonTypeId");

                    b.HasIndex("CommonTypeMsaterId");

                    b.ToTable("CommonMsater", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommonTypeMsater", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CountryMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClassId")
                        .HasColumnType("text");

                    b.Property<byte[]>("CountryFlag")
                        .HasColumnType("bytea");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("FATFSanction")
                        .HasColumnType("integer");

                    b.Property<int?>("IBANLength")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CountryMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CurrencyMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryMasterId")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("CurrencyFlag")
                        .HasColumnType("bytea");

                    b.Property<string>("FLM8Cd")
                        .HasColumnType("text");

                    b.Property<string>("ISD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryMasterId");

                    b.ToTable("CurrencyMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.EmployeeMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingTo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ResignDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpecifyBranch")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.ToTable("EmployeeMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.HAJJ.Entities.ApplicationHis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OldHAJJNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ApplicationHis", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.HAJJ.Entities.ApplicationMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HAJJNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("SLNO")
                        .HasColumnType("integer");

                    b.Property<int>("SmsStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ApplicationMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.HAJJ.Entities.CustomerMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CareRemarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChequeNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("DDAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DOE")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DOI")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PanCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RcNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("pptNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomerMaster", "Application");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonMsater", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", "CommonTypeMsater")
                        .WithMany()
                        .HasForeignKey("CommonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", null)
                        .WithMany("CommonMsater")
                        .HasForeignKey("CommonTypeMsaterId");

                    b.Navigation("CommonTypeMsater");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CurrencyMaster", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CountryMaster", "CountryMaster")
                        .WithMany("CurrencyMasters")
                        .HasForeignKey("CountryMasterId");

                    b.Navigation("CountryMaster");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.EmployeeMaster", b =>
                {
                    b.HasOne("HyBrForex.Domain.Exchange.Entities.CommonMsater", "Designation")
                        .WithMany("EmployeeMaster")
                        .HasForeignKey("DesignationId");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("HyBrForex.Domain.HAJJ.Entities.ApplicationMaster", b =>
                {
                    b.HasOne("HyBrForex.Domain.HAJJ.Entities.CustomerMaster", "Customer")
                        .WithMany("ApplicationMasters")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonMsater", b =>
                {
                    b.Navigation("EmployeeMaster");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CommonTypeMsater", b =>
                {
                    b.Navigation("CommonMsater");
                });

            modelBuilder.Entity("HyBrForex.Domain.Exchange.Entities.CountryMaster", b =>
                {
                    b.Navigation("CurrencyMasters");
                });

            modelBuilder.Entity("HyBrForex.Domain.HAJJ.Entities.CustomerMaster", b =>
                {
                    b.Navigation("ApplicationMasters");
                });
#pragma warning restore 612, 618
        }
    }
}
